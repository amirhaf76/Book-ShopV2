// <auto-generated />
using System;
using BookShop.ModelsLayer.DataAccessLayer.DbContexts.BookShopDbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookShop.Migrations
{
    [DbContext(typeof(BookShopDbContext))]
    partial class BookShopDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AuthorBooks", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.HasKey("BookId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("AuthorBooks");
                });

            modelBuilder.Entity("BookShop.ModelsLayer.DataAccessLayer.DataBaseModels.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("BookShop.ModelsLayer.DataAccessLayer.DataBaseModels.Repository", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<bool>("IsEnable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Repository");
                });

            modelBuilder.Entity("BookShop.ModelsLayer.DataAccessLayer.DataBaseModels.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ComfirmationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastChange")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<int>("UserAccountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserAccountId");

                    b.ToTable("Reservation");
                });

            modelBuilder.Entity("BookShop.ModelsLayer.DataAccessLayer.DataBaseModels.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("BookShop.ModelsLayer.DataAccessLayer.DataBaseModels.RolePermission", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermission");
                });

            modelBuilder.Entity("BookShop.ModelsLayer.DataAccessLayer.DataBaseModels.Stock", b =>
                {
                    b.Property<long>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("StockId"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("RepositoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ReservationId")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("StockId");

                    b.HasIndex("BookId");

                    b.HasIndex("RepositoryId");

                    b.HasIndex("ReservationId");

                    b.ToTable("Stock");
                });

            modelBuilder.Entity("BookShop.ModelsLayer.DataAccessLayer.DataBaseModels.UserPermission", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId", "UserId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPermission");
                });

            modelBuilder.Entity("BookShop.ModelsLayer.DataBaseLayer.DataBaseModels.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ZipCodeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ZipCodeId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("BookShop.ModelsLayer.DataBaseLayer.DataBaseModels.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Author");
                });

            modelBuilder.Entity("BookShop.ModelsLayer.DataBaseLayer.DataBaseModels.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Pages")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PublishedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("BookShop.ModelsLayer.DataBaseLayer.DataBaseModels.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumberCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("BookShop.ModelsLayer.DataBaseLayer.DataBaseModels.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("BookShop.ModelsLayer.DataBaseLayer.DataBaseModels.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Province");
                });

            modelBuilder.Entity("BookShop.ModelsLayer.DataBaseLayer.DataBaseModels.UserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegeisteredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserAccount");
                });

            modelBuilder.Entity("BookShop.ModelsLayer.DataBaseLayer.DataBaseModels.ZipCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<long>("Code")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("ZipCode");
                });

            modelBuilder.Entity("AuthorBooks", b =>
                {
                    b.HasOne("BookShop.ModelsLayer.DataBaseLayer.DataBaseModels.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookShop.ModelsLayer.DataBaseLayer.DataBaseModels.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BookShop.ModelsLayer.DataAccessLayer.DataBaseModels.Repository", b =>
                {
                    b.HasOne("BookShop.ModelsLayer.DataBaseLayer.DataBaseModels.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Address");
                });

            modelBuilder.Entity("BookShop.ModelsLayer.DataAccessLayer.DataBaseModels.Reservation", b =>
                {
                    b.HasOne("BookShop.ModelsLayer.DataBaseLayer.DataBaseModels.UserAccount", "UserAccount")
                        .WithMany("Reservations")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("BookShop.ModelsLayer.DataAccessLayer.DataBaseModels.RolePermission", b =>
                {
                    b.HasOne("BookShop.ModelsLayer.DataAccessLayer.DataBaseModels.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookShop.ModelsLayer.DataAccessLayer.DataBaseModels.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BookShop.ModelsLayer.DataAccessLayer.DataBaseModels.Stock", b =>
                {
                    b.HasOne("BookShop.ModelsLayer.DataBaseLayer.DataBaseModels.Book", "Book")
                        .WithMany("Stocks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookShop.ModelsLayer.DataAccessLayer.DataBaseModels.Repository", "Repository")
                        .WithMany("Stocks")
                        .HasForeignKey("RepositoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookShop.ModelsLayer.DataAccessLayer.DataBaseModels.Reservation", "Reservation")
                        .WithMany("Stocks")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Book");

                    b.Navigation("Repository");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("BookShop.ModelsLayer.DataAccessLayer.DataBaseModels.UserPermission", b =>
                {
                    b.HasOne("BookShop.ModelsLayer.DataAccessLayer.DataBaseModels.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookShop.ModelsLayer.DataAccessLayer.DataBaseModels.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.HasOne("BookShop.ModelsLayer.DataBaseLayer.DataBaseModels.UserAccount", "UserAccount")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("BookShop.ModelsLayer.DataBaseLayer.DataBaseModels.Address", b =>
                {
                    b.HasOne("BookShop.ModelsLayer.DataBaseLayer.DataBaseModels.ZipCode", "ZipCode")
                        .WithMany()
                        .HasForeignKey("ZipCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ZipCode");
                });

            modelBuilder.Entity("BookShop.ModelsLayer.DataBaseLayer.DataBaseModels.City", b =>
                {
                    b.HasOne("BookShop.ModelsLayer.DataBaseLayer.DataBaseModels.Province", "Province")
                        .WithMany("Cities")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("BookShop.ModelsLayer.DataBaseLayer.DataBaseModels.Province", b =>
                {
                    b.HasOne("BookShop.ModelsLayer.DataBaseLayer.DataBaseModels.Country", "Country")
                        .WithMany("Provinces")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("BookShop.ModelsLayer.DataBaseLayer.DataBaseModels.ZipCode", b =>
                {
                    b.HasOne("BookShop.ModelsLayer.DataBaseLayer.DataBaseModels.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("BookShop.ModelsLayer.DataAccessLayer.DataBaseModels.Repository", b =>
                {
                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("BookShop.ModelsLayer.DataAccessLayer.DataBaseModels.Reservation", b =>
                {
                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("BookShop.ModelsLayer.DataBaseLayer.DataBaseModels.Book", b =>
                {
                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("BookShop.ModelsLayer.DataBaseLayer.DataBaseModels.Country", b =>
                {
                    b.Navigation("Provinces");
                });

            modelBuilder.Entity("BookShop.ModelsLayer.DataBaseLayer.DataBaseModels.Province", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("BookShop.ModelsLayer.DataBaseLayer.DataBaseModels.UserAccount", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
